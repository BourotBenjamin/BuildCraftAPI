
// For those who want the bleeding edge
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:5.1.73"
        classpath "com.google.guava:guava:31.1-jre"
    }
}
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}


if (gradle.startParameter.taskNames.contains("checkstyle")) {
	apply plugin: "checkstyle"
}

ext.configFile = file "build.properties"
configFile.withReader {
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group= "com.mod-buildcraft.api" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "buildcraft-api" // the name that all artifacts will use as a base. artifacts names follow this pattern: [baseName]-[appendix]-[version]-[classifier].[extension]

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19.4'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'buildcraft'
            mods {
                buildcraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'buildcraft'
            mods {
                buildcraft {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'buildcraft'
            mods {
                buildcraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'buildcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                buildcraft {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir "api"
        }
    }
}

if (gradle.startParameter.taskNames.contains("checkstyle")) {
	checkstyle {
		configFile = file("guidelines/buildcraft.checkstyle")
	}

	task checkstyle {}
	tasks["checkstyle"].dependsOn checkstyleApi
	tasks["checkstyle"].dependsOn checkstyleMain

	tasks["checkstyleApi"].enabled = gradle.startParameter.taskNames.contains("checkstyle")
	tasks["checkstyleMain"].enabled = gradle.startParameter.taskNames.contains("checkstyle")
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", config.mc_version + "-" + config.forge_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':config.mc_version + "-" + config.forge_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

compileJava {
    options.compilerArgs << "-Xmaxerrs" << "2000"
    options.compilerArgs << "-Xmaxwarns" << "2"
    options.compilerArgs << "-Xlint:all"
    options.compilerArgs << "-Xdiags:verbose"
    options.compilerArgs << "-encoding" << "UTF-8"
}

javadoc {
    options.setUse(true)
    options.addStringsOption("Xmaxerrs").setValue(["2000"])
    options.addStringsOption("Xmaxwarns").setValue(["2"])
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.4-45.0.50'
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
    implementation 'com.google.guava:guava:23.4-jre'
}